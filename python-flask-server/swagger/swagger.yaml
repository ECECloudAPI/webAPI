---
swagger: "2.0"
info:
  description: "API for LargeDevProject, pushing to git"
  version: "1.0.1"
  title: "CloudServicesAPI"
basePath: "/api"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /buidlings/{building_id}/robots/:
    get:
      tags:
      - "default_controller"
      description: "get all robots in a specified building"
      operationId: "controllers.default_controller.buidlings_building_id_robots_get"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "robots in the building"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/robot"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "default_controller"
      description: "add a robot to the specified building"
      operationId: "controllers.default_controller.buidlings_building_id_robots_post"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete all robots from building"
      operationId: "controllers.default_controller.buidlings_building_id_robots_delete"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /buidlings/{building_id}/sensors/:
    get:
      tags:
      - "default_controller"
      description: "get all sensors in a specific building"
      operationId: "controllers.default_controller.buidlings_building_id_sensors_get"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "sensors in the building"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sensor"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "default_controller"
      description: "add a sensor to the specific building"
      operationId: "controllers.default_controller.buidlings_building_id_sensors_post"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete a specific user"
      operationId: "controllers.default_controller.buidlings_building_id_sensors_delete"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /buildings/:
    post:
      tags:
      - "default_controller"
      description: "create a new building"
      operationId: "controllers.default_controller.buildings_post"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete all buildings"
      operationId: "controllers.default_controller.buildings_delete"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /buildings/{building_id}:
    get:
      tags:
      - "default_controller"
      description: "get info on a specific building"
      operationId: "controllers.default_controller.buildings_building_id_get"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "building in the database"
          schema:
            $ref: "#/definitions/buildingObject"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "default_controller"
      description: "update a specific building"
      operationId: "controllers.default_controller.buildings_building_id_put"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete a specific building"
      operationId: "controllers.default_controller.buildings_building_id_delete"
      parameters:
      - name: "building_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /robots/:
    get:
      tags:
      - "default_controller"
      description: "Get a list of all robots"
      operationId: "controllers.default_controller.robots_get"
      parameters: []
      responses:
        200:
          description: "array of robots in the database"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/robot"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete all robots"
      operationId: "controllers.default_controller.robots_delete"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /robots/{robot_id}:
    get:
      tags:
      - "default_controller"
      description: "return a specefic robot"
      operationId: "controllers.default_controller.robots_robot_id_get"
      parameters:
      - name: "robot_id"
        in: "path"
        description: "id for specefic robot"
        required: true
        type: "string"
      responses:
        200:
          description: "robot in the database"
          schema:
            $ref: "#/definitions/robot"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "default_controller"
      description: "update a specific robot"
      operationId: "controllers.default_controller.robots_robot_id_put"
      parameters:
      - name: "robot_id"
        in: "path"
        description: "id for specific building"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete specefic robot"
      operationId: "controllers.default_controller.robots_robot_id_delete"
      parameters:
      - name: "robot_id"
        in: "path"
        description: "id for specefic robot"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /sensors/:
    get:
      tags:
      - "default_controller"
      description: "get a list of all sensors"
      operationId: "controllers.default_controller.sensors_get"
      parameters: []
      responses:
        200:
          description: "array of users in the database"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sensor"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "default_controller"
      description: "create a new sensor without an associated building"
      operationId: "controllers.default_controller.sensors_post"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete all users regardless of their building"
      operationId: "controllers.default_controller.sensors_delete"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /sensors/{sensor_id}:
    get:
      tags:
      - "default_controller"
      description: "get a specific sensor"
      operationId: "controllers.default_controller.sensors_sensor_id_get"
      parameters:
      - name: "sensor_id"
        in: "path"
        description: "id for specific sensor"
        required: true
        type: "string"
      responses:
        200:
          description: "sensors in the building"
          schema:
            $ref: "#/definitions/sensor"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "default_controller"
      description: "update a specific sensor"
      operationId: "controllers.default_controller.sensors_sensor_id_put"
      parameters:
      - name: "sensor_id"
        in: "path"
        description: "id for specific sensor"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete a specific sensor"
      operationId: "controllers.default_controller.sensors_sensor_id_delete"
      parameters:
      - name: "sensor_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /users/:
    get:
      tags:
      - "default_controller"
      description: "get a list of users"
      operationId: "controllers.default_controller.users_get"
      parameters: []
      responses:
        200:
          description: "array of users in the database"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/user"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "default_controller"
      description: "create a new user"
      operationId: "controllers.default_controller.users_post"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete all users"
      operationId: "controllers.default_controller.users_delete"
      parameters: []
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
  /users/{user_id}:
    get:
      tags:
      - "default_controller"
      description: "get a specific user"
      operationId: "controllers.default_controller.users_user_id_get"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "user in the database"
          schema:
            $ref: "#/definitions/user"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "default_controller"
      description: "update a specific user"
      operationId: "controllers.default_controller.users_user_id_put"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "default_controller"
      description: "delete a specific user"
      operationId: "controllers.default_controller.users_user_id_delete"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id for specific user"
        required: true
        type: "string"
      responses:
        200:
          description: "success message"
          schema:
            type: "string"
        default:
          description: "not found"
          schema:
            $ref: "#/definitions/errorModel"
definitions:
  sensor:
    type: "object"
    properties:
      iD:
        type: "string"
      Type:
        type: "string"
      location:
        type: "string"
      Buildingid:
        type: "string"
      room:
        type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/sensorData"
  sensorData:
    type: "object"
    properties:
      sensorModel:
        type: "string"
      data:
        type: "array"
        items:
          type: "string"
  buildingObject:
    type: "object"
    properties:
      Building:
        type: "string"
      buildingID:
        type: "string"
      owner:
        type: "string"
      rooms:
        type: "array"
        items:
          $ref: "#/definitions/room"
      users:
        type: "array"
        items:
          $ref: "#/definitions/user"
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/sensor"
      robots:
        type: "array"
        items:
          $ref: "#/definitions/robot"
  user:
    type: "object"
    properties:
      username:
        type: "string"
      location:
        type: "string"
  errorModel:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
  robot:
    type: "object"
    properties:
      id:
        type: "integer"
      emergency:
        type: "boolean"
      offensive:
        type: "boolean"
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/sensor"
      buildingID:
        type: "integer"
      name:
        type: "string"
      Movement:
        type: "string"
      Update:
        type: "integer"
      floor:
        type: "integer"
  room:
    type: "object"
    properties:
      roomName:
        type: "string"
      statuses:
        type: "array"
        items:
          type: "string"
      width:
        type: "string"
      length:
        type: "string"
      robots:
        type: "array"
        items:
          $ref: "#/definitions/sensor"
      sensors:
        type: "array"
        items:
          $ref: "#/definitions/sensor"
